package com.liugw.learn.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

public class NamedParameterJdbcTemplateTest {

	private static JdbcTemplate jdbcTemplate;

	@BeforeClass
	public static void setUpClass() {
		String url = "jdbc:hsqldb:mem:test";
		String username = "sa";
		String password = "";

		DriverManagerDataSource dataSource = new DriverManagerDataSource(url, username, password);
		dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
		jdbcTemplate = new JdbcTemplate(dataSource);
		System.out.println("BeforeClass ----- create dataSource");
	}

	// 在每个测试方法之前执行
	@Before
	public void setUp() {
		String createTableSql = "create memory table test" + "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
				+ "name varchar(100))";
		System.out.println(createTableSql);
		jdbcTemplate.update(createTableSql);

		// 创建函数
		String createHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str CHAR(100)) " +
				"returns INT begin atomic return length(str);end";
		jdbcTemplate.update(createHsqldbFunctionSql);

		// 创建存储过程
		String createHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST" +
				"(INOUT inOutName VARCHAR(100), OUT outId INT) " +
				"MODIFIES SQL DATA " +
				"BEGIN ATOMIC " +
				"  insert into test(name) values (inOutName); " +
				"  SET outId = IDENTITY(); " +
				"  SET inOutName = 'Hello,' + inOutName; " +
				"END";
		jdbcTemplate.execute(createHsqldbProcedureSql);
	}

	// 在每个测试方法之后执行
	@After
	public void tearDown() {
		jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
		jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");

		String dropTableSql = "drop table test";
		System.out.println(dropTableSql);
		jdbcTemplate.execute(dropTableSql);
	}

	@Test
	public void testNamedParameterJdbcTemplate1() {
		NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;
		// namedParameterJdbcTemplate =
		// new NamedParameterJdbcTemplate(dataSource);
		namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
		String insertSql = "insert into test(name) values(:name1)";
		String selectSql = "select * from test where name=:name1";
		String deleteSql = "delete from test where name=:name1";

		// 插入数据
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("name1", "mark");
		namedParameterJdbcTemplate.update(insertSql, paramMap);
		namedParameterJdbcTemplate.update(insertSql, paramMap);
		System.out.println("insert count=" + jdbcTemplate.queryForInt("select count(*) from test"));

		final List<Integer> result = new ArrayList<Integer>();
		namedParameterJdbcTemplate.query(selectSql, paramMap,
				new RowCallbackHandler() {
					@Override
					public void processRow(ResultSet rs) throws SQLException {
						result.add(rs.getInt("id"));
					}
				});
		System.out.println(result.size());
		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		namedParameterJdbcTemplate.update(deleteSql, paramSource);
	}

	/**
	 * 可以看出BeanPropertySqlParameterSource使用能减少很多工作量，但命名参数必须和JavaBean属性名称相对应才可以。
	 * BeanPropertySqlParameterSource( Object )
	 */
	@Test
	public void testNamedParameterJdbcTemplate2() {
		NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;
		namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);

		// Javabean
		UserModel model = new UserModel();
		model.setMyName("name5");
		SqlParameterSource paramSource = new BeanPropertySqlParameterSource(model);

		// 指定使用Java对象中的哪个字段，必须与【UserModel】JavaBean中定义的字段名称一致
		String insertSql = "insert into test(name) values(:myName)";
		namedParameterJdbcTemplate.update(insertSql, paramSource);

		System.out.println("insert count=" + jdbcTemplate.queryForInt("select count(*) from test"));
	}
}
