package com.liugw.learn.jdbc;

import java.sql.Types;
import java.util.HashMap;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.object.SqlUpdate;

/**
 * SqlUpdate类用于支持数据库更新操作，即增删改（insert、delete、update）操作，该方法类似于SqlQuery，只是职责不一样。
 * SqlUpdate提供了update及updateByNamedParam方法用于数据库更新操作，其中updateByNamedParam用于命名参数类型更新。
 * 
 * @author liugaowei
 *
 */
public class SqlUpdateTest {
	private static JdbcTemplate jdbcTemplate;

	@BeforeClass
	public static void setUpClass() {
		String url = "jdbc:hsqldb:mem:test";
		String username = "sa";
		String password = "";

		DriverManagerDataSource dataSource = new DriverManagerDataSource(url, username, password);
		dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
		jdbcTemplate = new JdbcTemplate(dataSource);
		System.out.println("BeforeClass ----- create dataSource");
	}

	// 在每个测试方法之前执行
	@Before
	public void setUp() {
		String createTableSql = "create memory table test" + "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
				+ "name varchar(100))";
		System.out.println(createTableSql);
		jdbcTemplate.update(createTableSql);

		// 创建函数
		String createHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str CHAR(100)) " +
				"returns INT begin atomic return length(str);end";
		jdbcTemplate.update(createHsqldbFunctionSql);

		// 创建存储过程
		String createHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST" +
				"(INOUT inOutName VARCHAR(100), OUT outId INT) " +
				"MODIFIES SQL DATA " +
				"BEGIN ATOMIC " +
				"  insert into test(name) values (inOutName); " +
				"  SET outId = IDENTITY(); " +
				"  SET inOutName = 'Hello,' + inOutName; " +
				"END";
		jdbcTemplate.execute(createHsqldbProcedureSql);
	}

	// 在每个测试方法之后执行
	@After
	public void tearDown() {
		jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
		jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");

		String dropTableSql = "drop table test";
		System.out.println(dropTableSql);
		jdbcTemplate.execute(dropTableSql);
	}

	/**
	 * SqlUpdate有两种使用方式：
	 * 
	 * （1）InsertUserModel.java -----类实现类似于SqlQuery实现，用于执行数据库插入操作，
	 * （2）SqlUpdate还提供一种更简洁的构造器：SqlUpdate(DataSource ds, String sql, int[]
	 * types); 其中types用于指定占位符的类型或者命名参数的类型；
	 * SqlUPdate还支持命名参数，使用updateByNamedParam方法来进行命名参数操作。
	 */
	@Test
	public void testSqlUpdate() {
		SqlUpdate sqlUpdate = new InsertUserModel(jdbcTemplate);
		sqlUpdate.update("jack");
		sqlUpdate.update("mark");
		System.out.println(jdbcTemplate.queryForInt("select count(*) from test where name='jack'"));

		String updateSql = "update test set name=? where name=?";
		SqlUpdate update = new SqlUpdate(jdbcTemplate.getDataSource(), updateSql,
				new int[] { Types.VARCHAR, Types.VARCHAR });
		update.update("jack1", "jack");
		System.out.println(jdbcTemplate.queryForInt("select count(*) from test where name='jack'"));
		System.out.println(jdbcTemplate.queryForInt("select count(*) from test where name='jack1'"));

		String deleteSql = "delete from test where name=:name";
		SqlUpdate deleteUpdate = new SqlUpdate(jdbcTemplate.getDataSource(), deleteSql, new int[] { Types.VARCHAR });
		// deleteUpdate.declareParameter(new SqlParameter(Types.VARCHAR));
		Map<String, Object> paramMap = new HashMap<>();
		paramMap.put("name", "jack1");
		deleteUpdate.updateByNamedParam(paramMap);
		System.out.println(jdbcTemplate.queryForInt("select count(*) from test where name='jack1'"));
	}

	public static void main(String[] args) {
		SqlUpdateTest updateTest = new SqlUpdateTest();
		SqlUpdateTest.setUpClass();
		updateTest.setUp();
		// ==================================================================
		updateTest.testSqlUpdate();
		// ==================================================================
		updateTest.tearDown();
	}

}
