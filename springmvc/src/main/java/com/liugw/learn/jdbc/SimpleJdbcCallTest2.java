package com.liugw.learn.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Map;

import javax.sql.DataSource;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.SqlInOutParameter;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.SqlReturnResultSet;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

public class SimpleJdbcCallTest2 {
	private static JdbcTemplate jdbcTemplate;

	@BeforeClass
	public static void setUpClass() {
		String url = "jdbc:hsqldb:mem:test";
		String username = "sa";
		String password = "";

		DriverManagerDataSource dataSource = new DriverManagerDataSource(url, username, password);
		dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
		jdbcTemplate = new JdbcTemplate(dataSource);
		System.out.println("BeforeClass ----- create dataSource");
	}

	// 在每个测试方法之前执行
	@Before
	public void setUp() {
		String createTableSql = "create memory table test" + "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
				+ "name varchar(100))";
		System.out.println(createTableSql);
		jdbcTemplate.update(createTableSql);

		// 创建函数
		String createHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str CHAR(100)) " +
				"returns INT begin atomic return length(str);end";
		jdbcTemplate.update(createHsqldbFunctionSql);

		// 创建存储过程
		String createHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST" +
				"(INOUT inOutName VARCHAR(100), OUT outId INT) " +
				"MODIFIES SQL DATA " +
				"BEGIN ATOMIC " +
				"  insert into test(name) values (inOutName); " +
				"  SET outId = IDENTITY(); " +
				"  SET inOutName = 'Hello,' + inOutName; " +
				"END";
		jdbcTemplate.execute(createHsqldbProcedureSql);
	}

	// 在每个测试方法之后执行
	@After
	public void tearDown() {
		jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
		jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");

		String dropTableSql = "drop table test";
		System.out.println(dropTableSql);
		jdbcTemplate.execute(dropTableSql);
	}

	@Test
	public void testSimpleJdbcCall1() {
		// 此处用mysql,因为hsqldb调用自定义函数和存储过程一样
		SimpleJdbcCall call = new SimpleJdbcCall(getMysqlDataSource());
		call.withFunctionName("FUNCTION_TEST");
		call.declareParameters(new SqlOutParameter("result", Types.INTEGER));
		call.declareParameters(new SqlParameter("str", Types.VARCHAR));
		Map<String, Object> outVlaues = call.execute("test");
		System.out.println(outVlaues.get("result"));
	}

	@Test
	public void testSimpleJdbcCall2() {
		// 调用hsqldb自定义函数得使用如下方式
		SimpleJdbcCall call = new SimpleJdbcCall(jdbcTemplate);
		call.withProcedureName("FUNCTION_TEST");
		call.declareParameters(new SqlReturnResultSet("result",
				new ResultSetExtractor<Integer>() {
					@Override
					public Integer extractData(ResultSet rs)
							throws SQLException, DataAccessException {
						while (rs.next()) {
							return rs.getInt(1);
						}
						return 0;
					}
				}));
		call.declareParameters(new SqlParameter("str", Types.VARCHAR));
		Map<String, Object> outVlaues = call.execute("test");
		System.out.println(outVlaues.get("result"));
	}

	@Test
	public void testSimpleJdbcCall3() {
		SimpleJdbcCall call = new SimpleJdbcCall(jdbcTemplate);
		call.withProcedureName("PROCEDURE_TEST");
		call.declareParameters(new SqlInOutParameter("inOutName", Types.VARCHAR));
		call.declareParameters(new SqlOutParameter("outId", Types.INTEGER));
		SqlParameterSource params = new MapSqlParameterSource().addValue("inOutName", "test");
		Map<String, Object> outVlaues = call.execute(params);
		System.out.println(outVlaues.get("inOutName"));
		System.out.println(outVlaues.get("outId"));
	}

	/**
	 * 获取mysql 数据源
	 * 
	 * @return
	 */
	public DataSource getMysqlDataSource() {
		String url = "jdbc:mysql://localhost:3306/taotao?serverTimezone=UTC";
		DriverManagerDataSource dataSource = new DriverManagerDataSource(url, "root", "root");
		dataSource.setDriverClassName("com.mysql.jdbc.Driver");
		return dataSource;
	}
}
